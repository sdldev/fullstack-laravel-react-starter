version: '3.8'

# Production Docker Compose configuration
# Services: Laravel App (FrankenPHP), MySQL, MinIO (S3), NPMplus (Nginx Proxy Manager)
# See docs/operations/DOCKER_DEPLOYMENT.md for detailed documentation

services:
  # Laravel Application with FrankenPHP Worker Mode
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laravel-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:80"
      # - "${APP_PORT_HTTPS:-8443}:443"
    environment:
      # Laravel Configuration
      APP_NAME: "${APP_NAME:-Laravel}"
      APP_ENV: "${APP_ENV:-production}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG:-false}"
      APP_URL: "${APP_URL:-http://localhost}"
      
      # Database
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: "${DB_DATABASE:-laravel}"
      DB_USERNAME: "${DB_USERNAME:-laravel}"
      DB_PASSWORD: "${DB_PASSWORD}"
      
      # Cache & Session
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      
      # Storage (MinIO/S3)
      FILESYSTEM_DISK: s3
      AWS_ACCESS_KEY_ID: "${MINIO_ACCESS_KEY}"
      AWS_SECRET_ACCESS_KEY: "${MINIO_SECRET_KEY}"
      AWS_DEFAULT_REGION: us-east-1
      AWS_BUCKET: "${MINIO_BUCKET:-laravel}"
      AWS_ENDPOINT: "http://minio:9000"
      AWS_USE_PATH_STYLE_ENDPOINT: true
      
      # FrankenPHP Worker Configuration
      FRANKENPHP_WORKERS: "${FRANKENPHP_WORKERS:-4}"
      
      # Auto migration/seeding (be careful!)
      AUTO_MIGRATE: "${AUTO_MIGRATE:-false}"
      AUTO_SEED: "${AUTO_SEED:-false}"
      
      # Logging
      LOG_CHANNEL: stack
      LOG_LEVEL: "${LOG_LEVEL:-error}"
    volumes:
      - storage-data:/app/storage/app
      - storage-logs:/app/storage/logs
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # MySQL 8.x Database
  mysql:
    image: mysql:8.0
    container_name: laravel-mysql
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    environment:
      MYSQL_DATABASE: "${DB_DATABASE:-laravel}"
      MYSQL_USER: "${DB_USERNAME:-laravel}"
      MYSQL_PASSWORD: "${DB_PASSWORD}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Cache, Session, and Queue
  redis:
    image: redis:7-alpine
    container_name: laravel-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: laravel-minio
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: "${MINIO_ACCESS_KEY}"
      MINIO_ROOT_PASSWORD: "${MINIO_SECRET_KEY}"
    volumes:
      - minio-data:/data
    networks:
      - app-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client - Create bucket on startup
  minio-client:
    image: minio/mc:latest
    container_name: laravel-minio-client
    depends_on:
      - minio
    networks:
      - app-network
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add minio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb minio/${MINIO_BUCKET:-laravel} --ignore-existing;
      /usr/bin/mc anonymous set download minio/${MINIO_BUCKET:-laravel};
      exit 0;
      "

  # Nginx Proxy Manager (NPMplus)
  npmplus:
    image: zoeyvid/npmplus:latest
    container_name: npmplus
    restart: unless-stopped
    ports:
      - "80:80"       # HTTP
      - "443:443"     # HTTPS
      - "81:81"       # Admin UI
    environment:
      # NPMplus Configuration
      TZ: UTC
      # Database (uses same MySQL instance)
      DB_MYSQL_HOST: mysql
      DB_MYSQL_PORT: 3306
      DB_MYSQL_NAME: npmplus
      DB_MYSQL_USER: "${DB_USERNAME:-laravel}"
      DB_MYSQL_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - npmplus-data:/data
      - npmplus-letsencrypt:/etc/letsencrypt
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy

  # Queue Worker (Laravel)
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laravel-queue
    restart: unless-stopped
    environment:
      # Same as app service
      APP_NAME: "${APP_NAME:-Laravel}"
      APP_ENV: "${APP_ENV:-production}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG:-false}"
      APP_URL: "${APP_URL:-http://localhost}"
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: "${DB_DATABASE:-laravel}"
      DB_USERNAME: "${DB_USERNAME:-laravel}"
      DB_PASSWORD: "${DB_PASSWORD}"
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - storage-data:/app/storage/app
      - storage-logs:/app/storage/logs
    networks:
      - app-network
    depends_on:
      - app
      - redis
    command: ["php", "artisan", "queue:work", "--tries=3", "--timeout=90", "--sleep=3", "--max-jobs=1000"]

  # Scheduler (Laravel Cron)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laravel-scheduler
    restart: unless-stopped
    environment:
      # Same as app service
      APP_NAME: "${APP_NAME:-Laravel}"
      APP_ENV: "${APP_ENV:-production}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG:-false}"
      APP_URL: "${APP_URL:-http://localhost}"
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: "${DB_DATABASE:-laravel}"
      DB_USERNAME: "${DB_USERNAME:-laravel}"
      DB_PASSWORD: "${DB_PASSWORD}"
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - storage-data:/app/storage/app
      - storage-logs:/app/storage/logs
    networks:
      - app-network
    depends_on:
      - app
      - redis
    command: >
      /bin/sh -c "
      while true; do
        php artisan schedule:run --verbose --no-interaction &
        sleep 60
      done
      "

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  storage-data:
    driver: local
  storage-logs:
    driver: local
  npmplus-data:
    driver: local
  npmplus-letsencrypt:
    driver: local
