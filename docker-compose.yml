version: '3.8'

# Application Docker Compose configuration
# Core services: Laravel App (FrankenPHP), Redis, Queue Worker, Scheduler
# For infrastructure services (MySQL, MinIO, NPMplus), see docker-compose.infrastructure.yml
# See docs/operations/DOCKER_DEPLOYMENT.md for detailed documentation

services:
  # Laravel Application with FrankenPHP Worker Mode
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laravel-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:80"
      # - "${APP_PORT_HTTPS:-8443}:443"
    environment:
      # Laravel Configuration
      APP_NAME: "${APP_NAME:-Laravel}"
      APP_ENV: "${APP_ENV:-production}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG:-false}"
      APP_URL: "${APP_URL:-http://localhost}"
      
      # Database (external service)
      DB_CONNECTION: "${DB_CONNECTION:-mysql}"
      DB_HOST: "${DB_HOST:-mysql}"
      DB_PORT: "${DB_PORT:-3306}"
      DB_DATABASE: "${DB_DATABASE:-laravel}"
      DB_USERNAME: "${DB_USERNAME:-laravel}"
      DB_PASSWORD: "${DB_PASSWORD}"
      
      # Cache & Session
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      
      # Storage (external MinIO/S3 service)
      FILESYSTEM_DISK: "${FILESYSTEM_DISK:-local}"
      AWS_ACCESS_KEY_ID: "${MINIO_ACCESS_KEY}"
      AWS_SECRET_ACCESS_KEY: "${MINIO_SECRET_KEY}"
      AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION:-us-east-1}"
      AWS_BUCKET: "${MINIO_BUCKET:-laravel}"
      AWS_ENDPOINT: "${AWS_ENDPOINT:-http://minio:9000}"
      AWS_USE_PATH_STYLE_ENDPOINT: "${AWS_USE_PATH_STYLE_ENDPOINT:-true}"
      
      # FrankenPHP Worker Configuration
      FRANKENPHP_WORKERS: "${FRANKENPHP_WORKERS:-4}"
      
      # Auto migration/seeding (be careful!)
      AUTO_MIGRATE: "${AUTO_MIGRATE:-false}"
      AUTO_SEED: "${AUTO_SEED:-false}"
      
      # Logging
      LOG_CHANNEL: stack
      LOG_LEVEL: "${LOG_LEVEL:-error}"
    volumes:
      - storage-data:/app/storage/app
      - storage-logs:/app/storage/logs
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Redis for Cache, Session, and Queue
  redis:
    image: redis:7-alpine
    container_name: laravel-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Queue Worker (Laravel)
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laravel-queue
    restart: unless-stopped
    environment:
      # Same as app service
      APP_NAME: "${APP_NAME:-Laravel}"
      APP_ENV: "${APP_ENV:-production}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG:-false}"
      APP_URL: "${APP_URL:-http://localhost}"
      DB_CONNECTION: "${DB_CONNECTION:-mysql}"
      DB_HOST: "${DB_HOST:-mysql}"
      DB_PORT: "${DB_PORT:-3306}"
      DB_DATABASE: "${DB_DATABASE:-laravel}"
      DB_USERNAME: "${DB_USERNAME:-laravel}"
      DB_PASSWORD: "${DB_PASSWORD}"
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - storage-data:/app/storage/app
      - storage-logs:/app/storage/logs
    networks:
      - app-network
    depends_on:
      - app
      - redis
    command: ["php", "artisan", "queue:work", "--tries=3", "--timeout=90", "--sleep=3", "--max-jobs=1000"]

  # Scheduler (Laravel Cron)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laravel-scheduler
    restart: unless-stopped
    environment:
      # Same as app service
      APP_NAME: "${APP_NAME:-Laravel}"
      APP_ENV: "${APP_ENV:-production}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG:-false}"
      APP_URL: "${APP_URL:-http://localhost}"
      DB_CONNECTION: "${DB_CONNECTION:-mysql}"
      DB_HOST: "${DB_HOST:-mysql}"
      DB_PORT: "${DB_PORT:-3306}"
      DB_DATABASE: "${DB_DATABASE:-laravel}"
      DB_USERNAME: "${DB_USERNAME:-laravel}"
      DB_PASSWORD: "${DB_PASSWORD}"
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    volumes:
      - storage-data:/app/storage/app
      - storage-logs:/app/storage/logs
    networks:
      - app-network
    depends_on:
      - app
      - redis
    command: >
      /bin/sh -c "
      while true; do
        php artisan schedule:run --verbose --no-interaction &
        sleep 60
      done
      "

networks:
  app-network:
    driver: bridge
    name: laravel-network
    external: false

volumes:
  redis-data:
    driver: local
  storage-data:
    driver: local
  storage-logs:
    driver: local
