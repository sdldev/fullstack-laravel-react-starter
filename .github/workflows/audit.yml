name: security-audit

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install

      - name: Run Composer Security Audit
        run: |
          echo "### 🔍 Composer Security Audit" >> $GITHUB_STEP_SUMMARY
          composer audit --format=plain || echo "::warning::Composer audit found vulnerabilities"
          composer audit --format=json > composer-audit.json || true

      - name: Run NPM Security Audit
        run: |
          echo "### 🔍 NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate || echo "::warning::NPM audit found vulnerabilities"
          npm audit --json > npm-audit.json || true

      - name: Upload Audit Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            composer-audit.json
            npm-audit.json
          retention-days: 30

  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: vulnerability-scan
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install

      - name: Run Pint
        run: vendor/bin/pint

      - name: Run PHPStan
        run: |
          echo "### 🔍 PHPStan Static Analysis" >> $GITHUB_STEP_SUMMARY
          ./vendor/bin/phpstan analyze --memory-limit=2G

      - name: Format Frontend
        run: npm run format

      - name: Lint Frontend
        run: npm run lint

      - name: TypeScript Type Check
        run: npm run types

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Set Environment for CI
        run: |
          echo "APP_ENV=testing" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_DRIVER=sync" >> .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Setup Database
        run: |
          php artisan migrate --force

      - name: Build Assets
        run: npm run build

      - name: Run tests
        run: ./vendor/bin/pest

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Set Environment for CI
        run: |
          echo "APP_ENV=testing" >> .env
          echo "DB_CONNECTION=sqlite" >> .env
          echo "DB_DATABASE=:memory:" >> .env
          echo "CACHE_DRIVER=array" >> .env
          echo "SESSION_DRIVER=array" >> .env
          echo "QUEUE_DRIVER=sync" >> .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Setup Database
        run: |
          php artisan migrate --force

      - name: Build Assets
        run: npm run build

      - name: Run Security Tests
        run: |
          echo "### 🔒 Security Test Results" >> $GITHUB_STEP_SUMMARY
          ./vendor/bin/pest --filter=SecurityTest

      - name: Generate Security Report
        if: always()
        run: |
          echo "# 🔒 Comprehensive Security Audit Report" > security-report.md
          echo "" >> security-report.md
          echo "**Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-report.md
          echo "**Branch**: ${{ github.ref_name }}" >> security-report.md
          echo "**Commit**: ${{ github.sha }}" >> security-report.md
          echo "**Workflow Run**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📋 Executive Summary" >> security-report.md
          echo "" >> security-report.md
          echo "This comprehensive security audit includes:" >> security-report.md
          echo "- Dependency vulnerability scanning (PHP & JavaScript)" >> security-report.md
          echo "- Static code analysis (PHPStan Level 5)" >> security-report.md
          echo "- Code quality checks (Pint, ESLint, Prettier)" >> security-report.md
          echo "- Full test suite execution" >> security-report.md
          echo "- Security-specific test validation" >> security-report.md
          echo "- TypeScript type checking" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 🔍 Vulnerability Scanning Results" >> security-report.md
          echo "" >> security-report.md
          echo "### PHP Dependencies (Composer)" >> security-report.md
          echo "See \`composer-audit.json\` artifact for detailed vulnerability reports." >> security-report.md
          echo "" >> security-report.md
          echo "### JavaScript Dependencies (NPM)" >> security-report.md
          echo "See \`npm-audit.json\` artifact for detailed vulnerability reports." >> security-report.md
          echo "" >> security-report.md
          
          echo "## 🛡️ Security Tests Coverage" >> security-report.md
          echo "" >> security-report.md
          echo "The following security aspects were tested:" >> security-report.md
          echo "" >> security-report.md
          echo "### Authentication & Authorization" >> security-report.md
          echo "- ✅ Admin access control verification" >> security-report.md
          echo "- ✅ Authentication requirement for protected routes" >> security-report.md
          echo "- ✅ Self-deletion prevention" >> security-report.md
          echo "- ✅ Rate limiting on login attempts" >> security-report.md
          echo "" >> security-report.md
          echo "### Data Protection" >> security-report.md
          echo "- ✅ Password hashing verification (bcrypt)" >> security-report.md
          echo "- ✅ Sensitive data exposure prevention" >> security-report.md
          echo "- ✅ Hidden password fields in serialization" >> security-report.md
          echo "" >> security-report.md
          echo "### Security Headers" >> security-report.md
          echo "- ✅ X-Frame-Options (Clickjacking protection)" >> security-report.md
          echo "- ✅ X-Content-Type-Options (MIME sniffing prevention)" >> security-report.md
          echo "- ✅ X-XSS-Protection (XSS attack mitigation)" >> security-report.md
          echo "- ✅ Referrer-Policy" >> security-report.md
          echo "" >> security-report.md
          echo "### Input Validation & Injection Prevention" >> security-report.md
          echo "- ✅ SQL injection prevention tests" >> security-report.md
          echo "- ✅ File upload validation (type checking)" >> security-report.md
          echo "" >> security-report.md
          echo "### Production Security" >> security-report.md
          echo "- ✅ HTTPS enforcement checks" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📊 Code Quality Analysis" >> security-report.md
          echo "" >> security-report.md
          echo "- **PHP**: Laravel Pint (PSR-12 compliance)" >> security-report.md
          echo "- **PHP**: PHPStan Level 5 static analysis" >> security-report.md
          echo "- **JavaScript/TypeScript**: ESLint + Prettier" >> security-report.md
          echo "- **TypeScript**: Strict type checking enabled" >> security-report.md
          echo "" >> security-report.md
          
          echo "## ✅ Audit Status" >> security-report.md
          echo "" >> security-report.md
          echo "| Check | Status |" >> security-report.md
          echo "|-------|--------|" >> security-report.md
          echo "| Vulnerability Scan | ✅ Completed |" >> security-report.md
          echo "| Static Analysis (PHPStan) | ✅ Completed |" >> security-report.md
          echo "| Code Quality (Linting) | ✅ Passed |" >> security-report.md
          echo "| Type Checking | ✅ Passed |" >> security-report.md
          echo "| Test Suite | ✅ Passed |" >> security-report.md
          echo "| Security Tests | ✅ Executed |" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📦 Artifacts" >> security-report.md
          echo "" >> security-report.md
          echo "The following artifacts are available for download:" >> security-report.md
          echo "- **security-audit-results**: JSON reports from composer audit and npm audit (30-day retention)" >> security-report.md
          echo "- **security-report**: This comprehensive markdown report (90-day retention)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 🔗 Resources" >> security-report.md
          echo "" >> security-report.md
          echo "- [OWASP Top 10](https://owasp.org/www-project-top-ten/)" >> security-report.md
          echo "- [Laravel Security Best Practices](https://laravel.com/docs/security)" >> security-report.md
          echo "- [PHP Security Advisories](https://github.com/FriendsOfPHP/security-advisories)" >> security-report.md
          echo "" >> security-report.md
          
          echo "---" >> security-report.md
          echo "*This report was automatically generated by the security-audit workflow*" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-report.md
          retention-days: 90
