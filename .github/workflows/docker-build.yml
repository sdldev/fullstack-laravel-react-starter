name: Docker Build and Test

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Dockerfile'
      - 'docker/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  pull_request:
    paths:
      - 'Dockerfile'
      - 'docker/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env << EOF
          APP_NAME="Laravel Test"
          APP_ENV=testing
          APP_KEY=base64:$(openssl rand -base64 32)
          APP_DEBUG=false
          APP_URL=http://localhost:8000
          
          DB_CONNECTION=mysql
          DB_HOST=mysql
          DB_PORT=3306
          DB_DATABASE=laravel_test
          DB_USERNAME=laravel
          DB_PASSWORD=test_password
          
          MYSQL_ROOT_PASSWORD=root_password
          
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_PASSWORD=redis_password
          
          CACHE_STORE=redis
          SESSION_DRIVER=redis
          QUEUE_CONNECTION=sync
          
          MINIO_ACCESS_KEY=minioadmin
          MINIO_SECRET_KEY=minioadmin123
          MINIO_BUCKET=laravel
          
          FILESYSTEM_DISK=local
          
          FRANKENPHP_WORKERS=2
          AUTO_MIGRATE=true
          AUTO_SEED=false
          
          LOG_CHANNEL=stderr
          LOG_LEVEL=debug
          EOF

      - name: Build Docker image
        run: docker compose build app

      - name: Start services
        run: |
          docker compose up -d mysql redis minio
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Start application
        run: |
          docker compose up -d app
          echo "Waiting for application to start..."
          sleep 20

      - name: Check container status
        run: |
          docker compose ps
          docker compose logs app

      - name: Test health endpoint
        run: |
          max_attempts=10
          attempt=0
          
          until curl -f http://localhost:8000/health || [ $attempt -eq $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Health check attempt $attempt/$max_attempts failed, retrying..."
            sleep 5
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            docker compose logs app
            exit 1
          fi
          
          echo "✅ Health check passed!"

      - name: Test application response
        run: |
          response=$(curl -s -w "\n%{http_code}" http://localhost:8000/)
          status_code=$(echo "$response" | tail -n 1)
          
          if [ "$status_code" -eq 200 ] || [ "$status_code" -eq 302 ]; then
            echo "✅ Application responding correctly (HTTP $status_code)"
          else
            echo "❌ Application returned unexpected status code: $status_code"
            docker compose logs app
            exit 1
          fi

      - name: Test static asset serving
        run: |
          # Test favicon
          curl -f -I http://localhost:8000/favicon.ico
          echo "✅ Static assets serving correctly"

      - name: Check application logs
        run: |
          docker compose exec -T app php artisan --version
          echo "✅ Laravel is working"

      - name: Check database connection
        run: |
          docker compose exec -T app php artisan tinker --execute="echo 'DB: ' . DB::connection()->getPdo()->getAttribute(PDO::ATTR_DRIVER_NAME);"
          echo "✅ Database connection working"

      - name: Check Redis connection
        run: |
          docker compose exec -T app php artisan tinker --execute="echo 'Redis: ' . (Redis::ping() ? 'OK' : 'FAIL');"
          echo "✅ Redis connection working"

      - name: Stop services and check for errors
        if: always()
        run: |
          echo "=== Application Logs ==="
          docker compose logs app
          echo ""
          echo "=== MySQL Logs ==="
          docker compose logs mysql | tail -20
          echo ""
          echo "=== Redis Logs ==="
          docker compose logs redis | tail -20
          echo ""
          docker compose down -v

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production
          platforms: linux/amd64

      - name: Generate artifact attestation
        if: github.ref == 'refs/heads/main'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.meta.outputs.digest }}
          push-to-registry: true
